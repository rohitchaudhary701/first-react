{"version":3,"sources":["ContactCards.js","Joke.js","jokesData.js","App.js","WhatTime.js","serviceWorker.js","index.js"],"names":["ContactCards","props","react_default","a","createElement","className","src","contact","imgUrl","width","alt","name","style","display","title","description","Joke","answer","question","jokesData","id","App","jokeComponents","map","joke","src_Joke","key","src_ContactCards","WhatTime","timeOfDay","hours","Date","getHours","styles","fontSize","color","Boolean","window","location","hostname","match","ReactDOM","render","src_App","src_WhatTime","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAeeA,MAbf,SAAsBC,GACrB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,QAAQC,OAAQC,MAAM,MAAMC,IAAI,KAChDR,EAAAC,EAAAC,cAAA,mBAAWH,EAAMM,QAAQI,MACzBT,EAAAC,EAAAC,cAAA,MAAIQ,MAAO,CAAEC,QAASZ,EAAMM,QAAQO,MAAQ,QAAU,SAAtD,UACSb,EAAMM,QAAQO,OAEvBZ,EAAAC,EAAAC,cAAA,iBAASH,EAAMM,QAAQQ,eCEXC,MAVf,SAAcf,GACb,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIQ,MAAO,CAACC,QAASZ,EAAMgB,OAAS,QAAU,SAA9C,aAAkEhB,EAAMiB,UACxEhB,EAAAC,EAAAC,cAAA,KAAGQ,MAAO,CAACC,QAASZ,EAAMgB,OAAS,QAAU,SAA7C,WAA+DhB,EAAMgB,QACrEf,EAAAC,EAAAC,cAAA,aCqBYe,EA5BG,CACjB,CACCC,GAAI,EACJF,SAAU,sBACVD,OAAQ,WAET,CACCG,GAAI,EACJF,SAAU,wBACVD,OAAQ,UAET,CACCG,GAAI,EACJF,SAAU,qBACVD,OAAQ,UAET,CACCG,GAAI,EACJF,SAAU,wBACVD,OAAQ,IAET,CACCG,GAAI,EACJF,SAAU,sBACVD,OAAQ,kBCWKI,MA7Bf,WACE,IAAMC,EAAiBH,EAAUI,IAAI,SAAAC,GAAI,OACvCtB,EAAAC,EAAAC,cAACqB,EAAD,CAAMC,IAAKF,EAAKJ,GAAIF,SAAUM,EAAKN,SAAUD,OAAQO,EAAKP,WAE5D,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZiB,EACDpB,EAAAC,EAAAC,cAACuB,EAAD,CACEpB,QAAS,CACPC,OACE,8LACFG,KAAM,QACNG,MAAO,gBACPC,YAAa,mCAGjBb,EAAAC,EAAAC,cAACuB,EAAD,CACEpB,QAAS,CACPC,OACE,8LACFG,KAAM,QACNG,MAAO,GACPC,YAAa,qCCKRa,MA9Bf,WACE,IAEIC,EADEC,GADO,IAAIC,MACEC,WAEbC,EAAS,CACbC,SAAU,IAgBZ,OAdMJ,EAAQ,IACND,EAAY,gBACZI,EAAOE,MAAQ,SACNL,EAAQ,IAAMA,EAAQ,IAC/BD,EAAY,kBACZI,EAAOE,MAAQ,OACNL,EAAQ,IAAMA,EAAQ,IAC/BD,EAAY,gBACZI,EAAOE,MAAQ,SAEfN,EAAY,cACZI,EAAOE,MAAQ,UAInBjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMO,MAAOqB,GACzBJ,ICdWO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACRxC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAACuC,EAAD,OACRzC,EAAAC,EAAAC,cAAA,eAASF,EAAAC,EAAAC,cAACwC,EAAD,QAIVC,SAASC,eAAe,SDmHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.081eef1f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ContactCards(props) {\r\n\treturn (\r\n\t\t<div className=\"contactcards\">\r\n\t\t\t<img src={props.contact.imgUrl} width=\"150\" alt=\"\" />\r\n\t\t\t<h3>name: {props.contact.name}</h3>\r\n\t\t\t<h2 style={{ display: props.contact.title ? \"block\" : \"none\" }}>\r\n\t\t\t\ttitle: {props.contact.title}\r\n\t\t\t</h2>\r\n\t\t\t<p>des: {props.contact.description}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ContactCards;\r\n","import React from 'react'\r\n\r\nfunction Joke(props){\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h3 style={{display: props.answer ? \"block\" : \"none\"}}>Question: {props.question}</h3>\r\n\t\t\t<p style={{display: props.answer ? \"block\" : \"none\"}}>Answer: {props.answer}</p>\r\n\t\t\t<hr/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Joke;","const jokesData = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tquestion: \"What is your Hobby?\",\r\n\t\tanswer: \"Cricket\"\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tquestion: \"What is your Network?\",\r\n\t\tanswer: \"Airtel\"\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tquestion: \"What is your City?\",\r\n\t\tanswer: \"Meerut\"\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tquestion: \"What is your Address?\",\r\n\t\tanswer: \"\"\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tquestion: \"What is your State?\",\r\n\t\tanswer: \"Uttar Pradesh\"\r\n\t}\r\n]\r\n\r\nexport default jokesData;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ContactCards from \"./ContactCards\";\nimport Joke from \"./Joke\";\nimport jokesData from \"./jokesData\";\n\nfunction App() {\n  const jokeComponents = jokesData.map(joke => (\n    <Joke key={joke.id} question={joke.question} answer={joke.answer} />\n  ));\n  return (\n    <div className=\"App\">\n      {jokeComponents}\n      <ContactCards\n        contact={{\n          imgUrl:\n            \"https://scontent.fdel3-1.fna.fbcdn.net/v/t1.0-9/26220289_1007720042731046_3906798058299411942_n.jpg?_nc_cat=103&_nc_ht=scontent.fdel3-1.fna&oh=f7ebe8cc8c5542db41878a5d9c0f4419&oe=5CCAE0DE\",\n          name: \"Rohit\",\n          title: \"Web Developer\",\n          description: \"Hi, I am a React JS Developer\"\n        }}\n      />\n      <ContactCards\n        contact={{\n          imgUrl:\n            \"https://scontent.fdel3-1.fna.fbcdn.net/v/t1.0-9/26220289_1007720042731046_3906798058299411942_n.jpg?_nc_cat=103&_nc_ht=scontent.fdel3-1.fna&oh=f7ebe8cc8c5542db41878a5d9c0f4419&oe=5CCAE0DE\",\n          name: \"Rohit\",\n          title: \"\",\n          description: \"Hi, I am a React JS Developer\"\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction WhatTime(){\r\n  const date = new Date()\r\n  const hours = date.getHours()\r\n  let timeOfDay\r\n  const styles = {\r\n    fontSize: 26\r\n  }\r\n    if (hours < 12){\r\n          timeOfDay = \"Good Morning!\"\r\n          styles.color = \"green\"\r\n        } else if (hours > 12 && hours < 17){\r\n          timeOfDay = \"Good Afternoon!\"\r\n          styles.color = \"red\"\r\n        } else if (hours > 17 && hours < 20){\r\n          timeOfDay = \"Good Evening!\"\r\n          styles.color = \"blue\"\r\n        }  else {\r\n          timeOfDay = \"Good Night!\"\r\n          styles.color = \"orange\"\r\n        }\r\n  \r\n  return (\r\n      <div className=\"App\" style={styles}>\r\n        {timeOfDay}\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default WhatTime;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport WhatTime from './WhatTime';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<div>\n\t\t<header><App /></header>\n\t\t<section><WhatTime /></section>\n\t</div>, \n\n\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}